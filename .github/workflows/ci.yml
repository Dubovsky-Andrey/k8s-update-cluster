name: Kubernetes Upgrade Check (dynamic nodes)

on:
  push:
    branches: [main]
  workflow_dispatch:
  schedule:
    - cron: "0 8 * * *"

permissions:
  contents: read

jobs:
  check-upgrade:
    runs-on: [self-hosted-arm]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          # Install jq for JSON processing
          sudo apt-get update -y
          sudo apt-get install -y jq

          # Install yq for YAML parsing
          YQ_VER="v4.44.1"
          ARCH=$(uname -m)
          if [ "$ARCH" = "x86_64" ]; then
            YQ_ARCH="amd64"
          else
            YQ_ARCH="arm64"
          fi
          curl -L "https://github.com/mikefarah/yq/releases/download/${YQ_VER}/yq_linux_${YQ_ARCH}" -o /tmp/yq
          sudo install -m 0755 /tmp/yq /usr/local/bin/yq

          # Install kubectl CLI
          K_VER=$(curl -sSL https://dl.k8s.io/release/stable.txt)
          curl -sSL "https://dl.k8s.io/release/${K_VER}/bin/linux/${YQ_ARCH}/kubectl" -o /tmp/kubectl
          sudo install -m 0755 /tmp/kubectl /usr/local/bin/kubectl

      - name: Restore kubeconfig
        run: |
          # Decode admin kubeconfig from secret
          echo "${{ secrets.ADMIN_KUBECONFIG_B64 }}" | base64 -d > $HOME/kubeconfig
          chmod 600 $HOME/kubeconfig
          # Export for all subsequent steps
          echo "KUBECONFIG=$HOME/kubeconfig" >> $GITHUB_ENV

      - name: Load desired version and label selector
        id: cfg
        run: |
          DESIRED=$(yq '.desiredVersion' k8s-upgrade-config.yaml)
          SELECTOR=$(yq -r '.labelSelector // ""' k8s-upgrade-config.yaml)
          echo "desired=$DESIRED" >> "$GITHUB_OUTPUT"
          echo "selector=$SELECTOR" >> "$GITHUB_OUTPUT"

      - name: Get list of nodes
        id: list
        run: |
          SEL="${{ steps.cfg.outputs.selector }}"
          if [ -n "$SEL" ]; then
            kubectl get nodes -l "$SEL" -o json > nodes.json
          else
            kubectl get nodes -o json > nodes.json
          fi
          jq -r '.items[].metadata.name' nodes.json > /tmp/nodes.lst
          echo "count=$(wc -l < /tmp/nodes.lst)" >> "$GITHUB_OUTPUT"

      - name: Compare kubelet versions
        id: check
        run: |
          DESIRED="${{ steps.cfg.outputs.desired }}"
          NEED=0
          while read -r NODE; do
            CURRENT=$(kubectl get node "$NODE" -o jsonpath='{.status.nodeInfo.kubeletVersion}')
            printf "Node %-20s : current=%s desired=%s\n" "$NODE" "$CURRENT" "$DESIRED"
            if [ "$CURRENT" != "$DESIRED" ]; then
              echo "::warning ::$NODE requires upgrade to $DESIRED"
              NEED=1
            fi
          done < /tmp/nodes.lst
          echo "need_upgrade=$NEED" >> "$GITHUB_OUTPUT"

      - name: Write summary
        if: always()
        run: |
          echo "### Kubernetes upgrade report" >> $GITHUB_STEP_SUMMARY
          echo "- Nodes checked: ${{ steps.list.outputs.count }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.check.outputs.need_upgrade }}" = "1" ]; then
            echo "-  Upgrade needed to ${{ steps.cfg.outputs.desired }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "-  All nodes on version ${{ steps.cfg.outputs.desired }}" >> $GITHUB_STEP_SUMMARY
          fi
  backup-etcd:
    name: Backup etcd Snapshot
    runs-on: [self-hosted-arm]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          YQ_VER="v4.44.1"
          ARCH=$(uname -m)
          case "$ARCH" in
            x86_64)
              YQ_ARCH="amd64"
              ;;
            aarch64|arm64)
              YQ_ARCH="arm64"
              ;;
            *)
              echo "Error: Unsupported architecture: $ARCH" >&2
              exit 1
              ;;
          esac
          curl -L "https://github.com/mikefarah/yq/releases/download/${YQ_VER}/yq_linux_${YQ_ARCH}" -o /tmp/yq
          sudo install -m 0755 /tmp/yq /usr/local/bin/yq
          K_VER=$(curl -sSL https://dl.k8s.io/release/stable.txt)
          curl -sSL "https://dl.k8s.io/release/${K_VER}/bin/linux/${YQ_ARCH}/kubectl" -o /tmp/kubectl
          sudo install -m 0755 /tmp/kubectl /usr/local/bin/kubectl

      - name: Restore admin kubeconfig
        run: |
          echo "${{ secrets.ADMIN_KUBECONFIG_B64 }}" | base64 -d > $HOME/kubeconfig
          chmod 600 $HOME/kubeconfig
          echo "KUBECONFIG=$HOME/kubeconfig" >> $GITHUB_ENV

      - name: Setup SSH key
        shell: bash
        run: |
          # Создаём ~/.ssh и пишем туда приватный ключ из секрета
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Backup etcd snapshot in one go
        shell: bash
        run: |
          # vars
          SSH_USER="${{ secrets.SSH_USER }}"
          PRIMARY=$(kubectl get nodes \
            -l node-role.kubernetes.io/control-plane \
            -o jsonpath='{.items[0].metadata.name}')
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')

          # sanity checks
          if [[ -z "$SSH_USER" ]]; then
            echo " SSH_USER не задан"; exit 1
          fi
          if [[ -z "$PRIMARY" ]]; then
            echo " Control-plane нода не найдена"; exit 1
          fi

          echo "→ Creating etcd snapshot on $PRIMARY..."
          ssh -o StrictHostKeyChecking=no "$SSH_USER@$PRIMARY" \
            "sudo apt-get update && \
             sudo apt-get install -y etcd-client && \
             sudo sh -lc 'ETCDCTL_API=3 etcdctl \
               --endpoints=https://127.0.0.1:2379 \
               --cacert=/etc/kubernetes/pki/etcd/ca.crt \
               --cert=/etc/kubernetes/pki/etcd/server.crt \
               --key=/etc/kubernetes/pki/etcd/server.key \
               snapshot save /tmp/etcd-snapshot-${TIMESTAMP}.db'"

          echo "→ Downloading snapshot via sudo cat..."
          ssh -o StrictHostKeyChecking=no "$SSH_USER@$PRIMARY" \
            "sudo cat /tmp/etcd-snapshot-${TIMESTAMP}.db" \
            > etcd-snapshot-${TIMESTAMP}.db

          echo " Snapshot downloaded: etcd-snapshot-${TIMESTAMP}.db"

      - name: Verify etcd snapshot
        run: |
          # 1) Найти файл
          SNAPSHOT=$(ls etcd-snapshot-*.db | head -n1) || { echo " Snapshot not found"; exit 1; }

          # 2) Проверить размер
          SIZE=$(stat -c%s "$SNAPSHOT")
          echo " Snapshot size: $SIZE bytes"
          if [ "$SIZE" -lt 1024 ]; then
            echo " Snapshot too small (<1 KB)" >&2
            exit 1
          fi

          # 3) Проверить метаданные через etcdctl
          etcdctl --write-out=table snapshot status "$SNAPSHOT" || {
            echo " etcdctl snapshot status failed" >&2
            exit 1
          }

          # 4) Попробовать восстановить в test-dir
          rm -rf /tmp/etcd-test && mkdir -p /tmp/etcd-test
          etcdctl snapshot restore "$SNAPSHOT" \
            --data-dir /tmp/etcd-test \
            --name test-etcd \
            --initial-cluster test-etcd=http://localhost:2380 \
            --initial-cluster-token test-token \
            --initial-advertise-peer-urls http://localhost:2380 || {
            echo " Snapshot restore failed" >&2
            exit 1
          }
          echo " Snapshot verification passed"

      - name: Upload etcd snapshot artifact
        uses: actions/upload-artifact@v4
        with:
          name: etcd-snapshot
          path: etcd-snapshot-*.db

  # upgrade-nodes:
  #   name: Upgrade Kubernetes Nodes
  #   needs:
  #     - check-upgrade
  #     - backup-etcd
  #   if: needs.check-upgrade.outputs.need_upgrade == '1'
  #   runs-on: [self-hosted-arm]

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Install dependencies
  #       run: |
  #         sudo apt-get update -y
  #         sudo apt-get install -y jq
  #         YQ_VER="v4.44.1"
  #         ARCH=$(uname -m)
  #         if [ "$ARCH" = "x86_64" ]; then YQ_ARCH="amd64"; else YQ_ARCH="arm64"; fi
  #         curl -L "https://github.com/mikefarah/yq/releases/download/${YQ_VER}/yq_linux_${YQ_ARCH}" -o /tmp/yq
  #         sudo install -m 0755 /tmp/yq /usr/local/bin/yq
  #         K_VER=$(curl -sSL https://dl.k8s.io/release/stable.txt)
  #         curl -sSL "https://dl.k8s.io/release/${K_VER}/bin/linux/${YQ_ARCH}/kubectl" -o /tmp/kubectl
  #         sudo install -m 0755 /tmp/kubectl /usr/local/bin/kubectl

  #     - name: Restore admin kubeconfig
  #       run: |
  #         echo "${{ secrets.ADMIN_KUBECONFIG_B64 }}" | base64 -d > $HOME/kubeconfig
  #         chmod 600 $HOME/kubeconfig
  #         echo "KUBECONFIG=$HOME/kubeconfig" >> $GITHUB_ENV

  #     - name: Load node list
  #       id: load-nodes
  #       run: |
  #         NODES=$(yq -r '.nodes[]' k8s-upgrade-config.yaml)
  #         echo "nodes=$NODES" >> "$GITHUB_OUTPUT"

  #     - name: Upgrade each node one by one
  #       run: |
  #         set -euo pipefail
  #         for NODE in ${{ steps.load-nodes.outputs.nodes }}; do
  #           ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@$NODE << 'EOF'
  #             sudo kubectl drain $NODE --ignore-daemonsets --delete-emptydir-data
  #             sudo apt-get update -y
  #             sudo apt-get install -y kubeadm=${{ needs.check-upgrade.outputs.desired }}-00
  #             sudo kubeadm upgrade node
  #             sudo apt-get install -y kubelet=${{ needs.check-upgrade.outputs.desired }}-00 kubectl=${{ needs.check-upgrade.outputs.desired }}-00
  #             sudo systemctl restart kubelet
  #             sudo kubectl uncordon $NODE
  #           EOF
  #         done
