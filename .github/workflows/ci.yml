name: Kubernetes Upgrade Check (dynamic nodes)

on:
  push:
    branches: [main]
  workflow_dispatch:
  schedule:
    - cron: "0 8 * * *"

permissions:
  contents: read

jobs:
  check-upgrade:
    runs-on: [self-hosted-arm]
    env:
      KUBECONFIG: ${{ secrets.KUBECONFIG }}

    steps:
      - uses: actions/checkout@v4

      - name: Install kubectl, jq, yq
        run: |
          # ---------- jq ----------
          sudo apt-get update -y
          sudo apt-get install -y jq

          # ---------- yq ----------
          YQ_VER="v4.44.1"
          ARCH=$(uname -m)          # x86_64 или aarch64
          case $ARCH in
            x86_64)  YQ_ARCH="amd64" ;;
            aarch64) YQ_ARCH="arm64" ;;
            arm64)   YQ_ARCH="arm64" ;;
            *) echo "Unsupported arch: $ARCH"; exit 1 ;;
          esac

          curl -L "https://github.com/mikefarah/yq/releases/download/${YQ_VER}/yq_linux_${YQ_ARCH}" \
            -o /tmp/yq
          sudo install -m 0755 /tmp/yq /usr/local/bin/yq
          yq --version               # sanity-check

          # ---------- kubectl ----------
          K_VER=$(curl -sSL https://dl.k8s.io/release/stable.txt)
          curl -sSL "https://dl.k8s.io/release/${K_VER}/bin/linux/${YQ_ARCH}/kubectl" \
            -o /tmp/kubectl
          sudo install -m 0755 /tmp/kubectl /usr/local/bin/kubectl

      # ───────────── read desired version ─────────────
      - id: cfg
        name: Load desired version and selector
        run: |
          DESIRED=$(yq '.desiredVersion' config/k8s-upgrade-config.yaml)
          SELECTOR=$(yq -r '.labelSelector // ""' config/k8s-upgrade-config.yaml)
          echo "desired=$DESIRED"   >> "$GITHUB_OUTPUT"
          echo "selector=$SELECTOR" >> "$GITHUB_OUTPUT"

      # ───────────── fetch node list dynamically ─────────────
      - id: list
        name: Get current node list
        run: |
          SEL="${{ steps.cfg.outputs.selector }}"
          if [ -n "$SEL" ]; then
            kubectl get nodes -l "$SEL" -o json > nodes.json
          else
            kubectl get nodes -o json > nodes.json
          fi
          jq -r '.items[].metadata.name' nodes.json > /tmp/nodes.lst
          echo "count=$(wc -l < /tmp/nodes.lst)" >> "$GITHUB_OUTPUT"

      # ───────────── compare versions ─────────────
      - id: check
        name: Compare kubelet versions
        run: |
          DESIRED="${{ steps.cfg.outputs.desired }}"
          NEED_UPGRADE=0
          while read -r NODE; do
            CURRENT=$(kubectl get node "$NODE" -o jsonpath='{.status.nodeInfo.kubeletVersion}')
            printf 'Node %-20s : %-10s (desired %s)\n' "$NODE" "$CURRENT" "$DESIRED"
            if [ "$CURRENT" != "$DESIRED" ]; then
              echo "::warning ::$NODE requires upgrade to $DESIRED"
              NEED_UPGRADE=1
            fi
          done < /tmp/nodes.lst
          echo "need_upgrade=$NEED_UPGRADE" >> "$GITHUB_OUTPUT"

      # ───────────── nice summary in UI ─────────────
      - name: Write summary
        if: always()
        run: |
          echo "### Kubernetes upgrade check"           >> $GITHUB_STEP_SUMMARY
          echo "- Nodes checked: ${{ steps.list.outputs.count }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.check.outputs.need_upgrade }}" = "1" ]; then
            echo "-  Upgrade needed to ${{ steps.cfg.outputs.desired }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "-  All nodes already on ${{ steps.cfg.outputs.desired }}"  >> $GITHUB_STEP_SUMMARY
          fi
